(() => {
  // src/app.js
  var platform = {
    host: "web"
  };
    window.onload = function () {
        BootFilament();
        return;
    ElementJS.boot(platform);
    let notationAPI = ElementJS.componentMap.get("notation");
    notationAPI = ElementJS.componentMap.get("notation");
    if (notationAPI) {
      notationAPI.boot();
    }
    new ElementJS.Module({ path: "./module.min.js", handler: ElementJS });
    ElementJS.loadFile({ path: "./index.xml", method: null, handler: ElementJS });
    ElementJS.loadFile({ path: "./index.json", handler: ElementJS });
    ElementJS.loadFile({ path: "./index.min.js", handler: ElementJS });
    ElementJS.loadFile({ path: "modules/module.a.js", handler: ElementJS });
    ElementJS.loadFile({ path: "audios/A0.mp3", handler: ElementJS });
    ElementJS.loadFile({ path: "images/index.jpg", handler: ElementJS });
    ElementJS.loadFile({ path: "images/index.jpg", handler: ElementJS });
    //IntervalTest();
    
    console.log(ElementJS);
  };
  var time = 0;
  function IntervalTest() {
    setInterval(() => {
      StyleSVG();
      time++;
    }, 100);
  }
  var note = null;
  var fill_r = 0;
  var fill_g = 0;
  var fill_b = 0;
  var fill_a = 1;
  function StyleSVG() {
    note = note ? note : document.getElementById("vf-auto1003").children[0];
    note.style.fill = `rgba(${fill_r},${fill_g},${fill_b},${fill_a})`;
    note.style.fill = "rgba(${fill_r},${fill_g},${fill_b},${fill_a})";
    note.style.stroke = "#0000FF";
    if (fill_b + 10 <= 255 && time <= 5)
      fill_b += 100;
  }
  function BootFilament() {
    Filament.init(["filament/materials/nonlit.mat"], () => {
      window.VertexAttribute = Filament.VertexAttribute;
      window.AttributeType = Filament.VertexBuffer$AttributeType;
      window.Projection = Filament.Camera$Projection;
      window.app = new App(document.getElementsByTagName("canvas")[0]);
    });
  }
  var App = class {
    constructor(canvas) {
      this.canvas = canvas;
      const engine = this.engine = Filament.Engine.create(this.canvas);
      this.scene = engine.createScene();
      this.triangle = Filament.EntityManager.get().create();
      this.scene.addEntity(this.triangle);
      const TRIANGLE_POSITIONS = new Float32Array([
        1,
        0,
        Math.cos(Math.PI * 2 / 3),
        Math.sin(Math.PI * 2 / 3),
        Math.cos(Math.PI * 4 / 3),
        Math.sin(Math.PI * 4 / 3)
      ]);
      const TRIANGLE_COLORS = new Uint32Array([4278190080, 4294967040, 4294902015]);
      this.vb = Filament.VertexBuffer.Builder().vertexCount(3).bufferCount(2).attribute(VertexAttribute.POSITION, 0, AttributeType.FLOAT2, 0, 8).attribute(VertexAttribute.COLOR, 1, AttributeType.UBYTE4, 0, 4).normalized(VertexAttribute.COLOR).build(engine);
      this.vb.setBufferAt(engine, 0, TRIANGLE_POSITIONS);
      this.vb.setBufferAt(engine, 1, TRIANGLE_COLORS);
      this.ib = Filament.IndexBuffer.Builder().indexCount(3).bufferType(Filament.IndexBuffer$IndexType.USHORT).build(engine);
      this.ib.setBuffer(engine, new Uint16Array([0, 1, 2]));
      const matinst = null;
      Filament.RenderableManager.Builder(1).boundingBox({ center: [-1, -1, -1], halfExtent: [1, 1, 1] }).material(0, matinst).geometry(0, Filament.RenderableManager$PrimitiveType.TRIANGLES, this.vb, this.ib).build(engine, this.triangle);
      this.swapChain = engine.createSwapChain();
      this.renderer = engine.createRenderer();
      this.camera = engine.createCamera(Filament.EntityManager.get().create());
      this.view = engine.createView();
      this.view.setSampleCount(4);
      this.view.setCamera(this.camera);
      this.view.setScene(this.scene);
      this.renderer.setClearOptions({ clearColor: [0, 0.1, 0.2, 1], clear: true });
      this.resize();
      this.render = this.render.bind(this);
      this.resize = this.resize.bind(this);
      window.addEventListener("resize", this.resize);
      window.requestAnimationFrame(this.render);
    }
    render() {
      const radians = Date.now() / 1e3;
      const transform = null;
      const tcm = this.engine.getTransformManager();
      const inst = tcm.getInstance(this.triangle);
      inst.delete();
      this.renderer.render(this.swapChain, this.view);
      window.requestAnimationFrame(this.render);
    }
    resize() {
      const dpr = window.devicePixelRatio;
      let width = 500;
      let height = 300;
      this.canvas.width = width;
      this.canvas.height = height;
      this.view.setViewport([0, 0, width, height]);
      const aspect = width / height;
      this.camera.setProjection(Projection.ORTHO, -aspect, aspect, -1, 1, 0, 1);
    }
  };
})();
